1) Create project
    - File > new >Spring strater project 
        - We select tools like JPA - WEB - H2 - MySQL
2) Create a entity
    - Create a package
        com.onDiscover.models.entities
    - Create an entity 
        package com.onDiscover.models.entities;

        import java.io.Serializable;
        import java.util.Date;

        import javax.persistence.Column;
        import javax.persistence.Entity;
        import javax.persistence.GeneratedValue;
        import javax.persistence.GenerationType;
        import javax.persistence.Id;
        import javax.persistence.PrePersist;
        import javax.persistence.PreUpdate;
        import javax.persistence.Table;
        import javax.persistence.Temporal;
        import javax.persistence.TemporalType;
        import javax.validation.constraints.Email;
        import javax.validation.constraints.NotEmpty;
        import javax.validation.constraints.NotNull;
        import javax.validation.constraints.Size;

        @Entity
        @Table(name = "person")
        public class Person implements Serializable {
            /**
            * 
            */
            private static final long serialVersionUID = 1L;

            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            @Column(name = "id")
            private Long id;

            @Column(name = "name")
            @NotEmpty
            @Size(max = 150)
            private String name;

            @Column(name = "last_name")
            @NotEmpty
            @Size(max = 200)
            private String lastName;

            @Column(name = "email")
            @NotEmpty
            @Size(max = 150)
            @Email
            private String email;

            @Column(name = "number_document")
            @Size(max = 20, min = 3)
            @NotEmpty
            private String numberDocument;

            @Column(name = "gender")
            @NotEmpty
            private String gender;

            @Column(name = "birth_date")
            @Temporal(TemporalType.DATE)
            @NotNull
            private Date birthDate;

            @Column(name = "issue_date")
            @Temporal(TemporalType.DATE)
            @NotNull
            private Date issueDate;

            @Column(name = "created_at")
            @Temporal(TemporalType.DATE)
            private Date createdAt;

            @Column(name = "modified_at")
            @Temporal(TemporalType.DATE)
            private Date modifiedAt;

            public Person() {
                super();
            }

            @PrePersist
            public void prePersist() {
                this.createdAt = new Date();
                this.modifiedAt = new Date();
            }

            @PreUpdate
            public void preUpdate() {
                this.modifiedAt = new Date();
            }

            @Override
            public int hashCode() {
                final int prime = 31;
                int result = 1;
                result = prime * result + ((id == null) ? 0 : id.hashCode());
                return result;
            }

            @Override
            public boolean equals(Object obj) {
                if (this == obj)
                    return true;
                if (obj == null)
                    return false;
                if (getClass() != obj.getClass())
                    return false;
                Person other = (Person) obj;
                if (id == null) {
                    if (other.id != null)
                        return false;
                } else if (!id.equals(other.id))
                    return false;
                return true;
            }

            @Override
            public String toString() {
                return "Person [id=" + id + ", name=" + name + ", lastName=" + lastName + ", email=" + email
                        + ", numberDocument=" + numberDocument + ", gender=" + gender + ", birthDate=" + birthDate
                        + ", issueDate=" + issueDate + ", createdAt=" + createdAt + ", modifiedAt=" + modifiedAt + "]";
            }

            // getters and setters
        }

3) Generando Daos para el manejo de transacciones
    - se crea un paquete para Daos
        com.onDiscover.models.daos
    - se crea interfaz del dao llamada IPersonDao
        package com.onDiscover.models.dao;
        import java.util.List;
        import com.onDiscover.models.entities.Person;

        public interface IPersonDao {
            /**
            * It returns all list of person
            * @return
            */
            public List<Person> findAll();
            
            /**
            * It returns a person by id
            * @return
            */
            public Person findById(Long id);
            
            /**
            * It saves a person
            * @param person
            */
            public void save(Person person);
        }
    - Se crea una clase que implemente el dao llamado PersonDao
        package com.onDiscover.models.dao;

        import java.util.List;

        import javax.persistence.EntityManager;
        import javax.persistence.PersistenceContext;

        import org.springframework.stereotype.Repository;
        import org.springframework.transaction.annotation.Transactional;

        import com.onDiscover.models.entities.Person;

        @Repository
        public class PersonDao implements IPersonDao {

            @PersistenceContext
            private EntityManager em;

            @SuppressWarnings("unchecked")
            @Override
            @Transactional(readOnly = true)
            public List<Person> findAll() {
                return em.createQuery("from Person p").getResultList();
            }

            @Override
            @Transactional
            public void save(Person person) {
                if (person != null && person.getId() != null) {
                    em.merge(person);
                    return;
                } 
                em.persist(person);
                

            }

            @Override
            public Person findById(Long id) {
                if(id != null) {
                    return em.find(Person.class, id);
                }
                return null;
            }

        }
4) Se crea controller para manejar el flujo
    - se crea paquete para los controllers
        com.onDiscover.controllers
    - se crea clase controller llamada person controller
        package com.onDiscover.controllers;
        import java.util.List;

        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.http.HttpStatus;
        import org.springframework.http.ResponseEntity;
        import org.springframework.stereotype.Controller;
        import org.springframework.web.bind.annotation.CrossOrigin;
        import org.springframework.web.bind.annotation.GetMapping;
        import org.springframework.web.bind.annotation.PathVariable;
        import org.springframework.web.bind.annotation.PostMapping;
        import org.springframework.web.bind.annotation.RequestBody;
        import org.springframework.web.bind.annotation.RequestMapping;

        import com.onDiscover.models.dao.IPersonDao;
        import com.onDiscover.models.entities.Person;

        @Controller
        @RequestMapping(value = "/person")
        public class PersonController {
            @Autowired
            private IPersonDao personDao;

            @GetMapping(value = "/")
            @CrossOrigin(origins="http://localhost:4200")
            public ResponseEntity<List<Person>> findAll() {
                List<Person> list = personDao.findAll();
                return new ResponseEntity<List<Person>>(list, HttpStatus.OK);
            }

            @GetMapping(value = "/{id}")
            public ResponseEntity<?> findById(@PathVariable(name = "id") Long id) {
                Person person = personDao.findById(id);
                if (person != null) {
                    return new ResponseEntity<Person>(person, HttpStatus.OK);
                }
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }

            @PostMapping(value = "/save")
            public ResponseEntity<Person> save(@RequestBody Person input) {
                personDao.save(input);
                return new ResponseEntity<Person>(input, HttpStatus.OK);
            }

        }
5) Configure cross origin for all project
    - In com.onDiscover.OnDiscoverBackTrainingApplication
        @SpringBootApplication
        public class OnDiscoverBackTrainingApplication {

            public static void main(String[] args) {
                SpringApplication.run(OnDiscoverBackTrainingApplication.class, args);
            }
            
            @Bean
            public WebMvcConfigurer corsConfigure() {
                return new WebMvcConfigurer() {
                    @Override
                    public void addCorsMappings(CorsRegistry registry) {
                        registry.addMapping("/person/").allowedOrigins("http://localhost:4200");
                        registry.addMapping("/person/{id}").allowedOrigins("http://localhost:4200");
                    }			
                };
            }
        }
6) Configuring default time zone
    - I had some issues when I try to send a string date by POST. Spring was substracting a day to the date
    - So the solution is to configure timezon as default so in [Project]Application.java
        @SpringBootApplication
        public class OnDiscoverBackTrainingApplication {
           ...
            @Bean
            public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilderCustomizer() {
                return jackson2ObjectMapperBuilderCustomizer -> jackson2ObjectMapperBuilderCustomizer
                        .timeZone(TimeZone.getDefault());
            }
        }
7) Cross origins conflicts with delete
    - By default only is allowed the methods GET and POST so we have to ensure that DELETE has to be on this list
    - So in [Project]Application.java
        @Bean
        public WebMvcConfigurer corsConfigure() {
            return new WebMvcConfigurer() {
                @Override
                public void addCorsMappings(CorsRegistry registry) {
                    String angular_dev = "http://localhost:4200";
                    registry.addMapping("/**").allowedOrigins(angular_dev).allowedMethods("GET", "POST", "DELETE");
                }
            };
        }

8) Create a service layer
    - We crete service as a business facade , the idea is to execute multiple daos in a service 
    - We create a package
        com.onDiscover.models.services
    - We create a interface called IPersonService.java
        public interface IPersonService {
            /**
            * It returns all list of person
            * @return
            */
            public List<Person> findAll();
            
            /**
            * It returns a person by id
            * @return
            */
            public Person findById(Long id);
            
            /**
            * It saves a person
            * @param person
            */
            public void save(Person person);
            
            /**
            * It deletes a person
            * @param id
            */
            public void delete(Person person);
        }

    - We create a class that implements the interface service , it is called PersonService.java
    - In this point we removed the Transactional annotations in daos and we set to the service
        package com.onDiscover.models.services;

        import java.util.List;

        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.stereotype.Service;
        import org.springframework.transaction.annotation.Transactional;

        import com.onDiscover.models.daos.IPersonDao;
        import com.onDiscover.models.entities.Person;

        @Service
        public class PersonService implements IPersonService {
            @Autowired
            private IPersonDao personDao;

            @Override
            @Transactional(readOnly = true)
            public List<Person> findAll() {
                return personDao.findAll();
            }

            @Override
            @Transactional(readOnly = true)
            public Person findById(Long id) {
                return personDao.findById(id);
            }

            @Override
            @Transactional
            public void save(Person person) {
                personDao.save(person);
            }

            @Override
            @Transactional
            public void delete(Person person) {
                personDao.delete(person);
            }

        }

    - And finally we execute the service in the controller

        package com.onDiscover.controllers;

        import java.util.List;

        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.http.HttpStatus;
        import org.springframework.http.ResponseEntity;
        import org.springframework.stereotype.Controller;
        import org.springframework.web.bind.annotation.DeleteMapping;
        import org.springframework.web.bind.annotation.GetMapping;
        import org.springframework.web.bind.annotation.PathVariable;
        import org.springframework.web.bind.annotation.PostMapping;
        import org.springframework.web.bind.annotation.RequestBody;
        import org.springframework.web.bind.annotation.RequestMapping;

        import com.onDiscover.error.ErrorMessage;
        import com.onDiscover.models.entities.Person;
        import com.onDiscover.models.services.IPersonService;

        @Controller
        @RequestMapping(value = "/person")
        public class PersonController {
            @Autowired
            private IPersonService personService;

            @GetMapping(value = "/get")
            public ResponseEntity<List<Person>> findAll() {
                List<Person> list = personService.findAll();
                return new ResponseEntity<List<Person>>(list, HttpStatus.OK);
            }

            @GetMapping(value = "/get/{id}")
            public ResponseEntity<?> findById(@PathVariable(name = "id") Long id) {
                Person person = personService.findById(id);
                if (person != null) {
                    return new ResponseEntity<Person>(person, HttpStatus.OK);
                }
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }

            @PostMapping(value = "/save")
            public ResponseEntity<?> save(@RequestBody Person input) {
                try {
                    personService.save(input);
                    return new ResponseEntity<Person>(input, HttpStatus.OK);
                } catch (Exception ex) {
                    return new ResponseEntity<ErrorMessage>(
                            new ErrorMessage("Error in some validations: " + ex.getLocalizedMessage()),
                            HttpStatus.INTERNAL_SERVER_ERROR);
                }

            }

            @DeleteMapping(value = "/delete/{id}")
            public ResponseEntity delete(@PathVariable(name = "id") Long id) {
                if (id != null) {
                    Person person = personService.findById(id);
                    if(person != null && person.getId() != null) {
                        try {
                            personService.delete(person);
                            return new ResponseEntity(HttpStatus.OK);
                        } catch (Exception ex) {
                            return new ResponseEntity<ErrorMessage>(
                                    new ErrorMessage("Error in some validations: " + ex.getLocalizedMessage()),
                                    HttpStatus.INTERNAL_SERVER_ERROR);
                        }
                    }			
                }
                return new ResponseEntity(HttpStatus.NOT_FOUND);	
            }

        }

9) Implement CRUDRepository
    - interfaces Dao will extend CRUDRepository with the basic operations of crud
    - we need to remove the class DAO implementation
10) install MySQL
    - we go to
        https://dev.mysql.com/downloads/installer/
        Note:
            - I had to install microsfot redistribute
                https://www.microsoft.com/en-us/download/confirmation.aspx?id=48145
            - I had to install .net installer
                https://www.microsoft.com/en-us/download/confirmation.aspx?id=42642
    - we install sql yog community
        https://github.com/webyog/sqlyog-community/wiki/Downloads
11) sql yog create database ondiscover
    - we create database ondiscover
12) Configuring spring project with the new datasource
    - in application.properties
        spring.datasource.url=jdbc:mysql://localhost/ondiscover?autoReconnect=true&useSSL=false
        spring.datasource.username=root
        spring.datasource.password=root
        spring.datasource.driver-class-name=com.mysql.jdbc.Driver
        spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
        spring.jpa.hibernate.ddl-auto=create-drop
        logging.level.org.hibernate.SQL=debug
13) Paginator
    - In IPersonDao we are gonna extend from PagingAndSortingRepository and it inherances from CRUDRepository so we mantain the methods
        public interface IPersonDao extends PagingAndSortingRepository<Person, Long> {

        }
    - In IPersonService we create a method called findAll with a argument Pageable pageable
        /**
        * It returns Page<Person> depending on the variable pageable
        * @param pageable
        * @return
        */
        public Page<Person> findAll(Pageable pageable);
    - In PersonService.java we implement the method
        @Override
        @Transactional(readOnly = true)
        public Page<Person> findAll(Pageable pageable) {
            return personDao.findAll(pageable);
        }
    - In PersonController.java
        @GetMapping(value = "/get")
        public ResponseEntity<Page<Person>> findAll(@RequestParam(name="page", defaultValue="0") int page) {
            Pageable pageable = PageRequest.of(page, 5);
            Page<Person> list = personService.findAll(pageable);
            return new ResponseEntity<Page<Person>>(list, HttpStatus.OK);
        }
14) File system
    - create a service interface called IFileSystemService
        package com.ondiscover.models.services;
        import java.io.IOException;
        import org.springframework.web.multipart.MultipartFile;
        public interface IFileSystemService {
            /**
            * This method loads a resource from file system
            * 
            * @param fileName
            * @return
            */
            public byte[] load(String fileName) throws IOException;

            /**
            * This method copies a file
            * 
            * @param file
            * @return
            */
            public String copy(MultipartFile file) throws IOException;

            /**
            * This method delete a filename
            * 
            * @param fileName
            * @return
            */
            public boolean delete(String fileName);

        }
    - create a class that implements the interface FileSystemService
        package com.ondiscover.models.services;
        import java.io.File;
        import java.io.IOException;
        import java.nio.file.Files;
        import java.nio.file.Path;
        import java.nio.file.Paths;
        import java.util.Date;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;
        import org.springframework.stereotype.Service;
        import org.springframework.web.multipart.MultipartFile;

        @Service
        public class FileSystemService implements IFileSystemService {

            private final Logger log = LoggerFactory.getLogger(getClass());
            /** Variable stores the path directory where files will be saved */
            public static String UPLOAD_DIRECTORY = "src//main//resources//static//upload";

            /*
            * @see com.ondiscover.models.services.IFileSystemService#load(java.lang.String)
            */
            @Override
            public byte[] load(String fileName) throws IOException {
                Path fileDirectory = this.getPathByFileName(fileName);
                return Files.readAllBytes(fileDirectory);
            }

            /*
            * @see
            * com.ondiscover.models.services.IFileSystemService#copy(org.springframework.
            * web.multipart.MultipartFile)
            */
            @Override
            public String copy(MultipartFile file) throws IOException {
                String fileName = this.generateRandomFileName(file);
                Path fileDirectory = this.getPathByFileName(fileName);
                Files.write(fileDirectory, file.getBytes());
                return fileName;
            }

            /*
            * @see
            * com.ondiscover.models.services.IFileSystemService#delete(java.lang.String)
            */
            @Override
            public boolean delete(String fileName) {
                Path fileDirectory = getPathByFileName(fileName);
                File f = fileDirectory.toFile();
                if (f.exists()) {
                    f.delete();
                    return true;
                }
                return false;
            }

            /**
            * This method returns a Path
            * 
            * @param fileName
            * @return
            */
            private Path getPathByFileName(String fileName) {
                String absolutePath = Paths.get(UPLOAD_DIRECTORY).toFile().getAbsolutePath();
                StringBuilder strPathFile = new StringBuilder().append(absolutePath).append("//").append(fileName);
                return Paths.get(strPathFile.toString());
            }

            /**
            * Method generates random Filename
            * 
            * @param file
            * @return
            */
            private String generateRandomFileName(MultipartFile file) {
                StringBuilder stringBuilder = new StringBuilder().append(String.valueOf(new Date().getTime()));
                if (file != null) {
                    stringBuilder.append(".").append(file.getContentType().split("/")[1]).toString();
                }
                return stringBuilder.toString();
            }

        }
    - In PersonController we create two methods savePhoto and getPhotoById To manage the getPhoto
        ...
        @Controller
        @RequestMapping(value = "/person")
        public class PersonController {
            ...
            @Autowired
	        private IFileSystemService fileSystemService;
            ...
            @GetMapping(value = "/get/photo/{id}")
            public ResponseEntity<?> getPhotoById(@PathVariable(name = "id") Long id) {
                try {
                    if (id == null)
                        return new ResponseEntity<ErrorMessage>(new ErrorMessage("Please set id"), HttpStatus.CONFLICT);
                    Person person = personService.findById(id);
                    if (person == null)
                        return new ResponseEntity<ErrorMessage>(new ErrorMessage("Person not found"), HttpStatus.NOT_FOUND);
                    if (person.getPhoto().isEmpty())
                        return new ResponseEntity<ErrorMessage>(new ErrorMessage("Person does not have photography"),
                                HttpStatus.NO_CONTENT);
                    byte[] image = fileSystemService.load(person.getPhoto());
                    return ResponseEntity.ok().contentType(MediaType.IMAGE_JPEG).body(image);
                } catch (NoSuchElementException ex) {
                    return new ResponseEntity<ErrorMessage>(new ErrorMessage("Person not found"), HttpStatus.NOT_FOUND);
                } catch (IOException e) {
                    return new ResponseEntity<ErrorMessage>(new ErrorMessage("The person's image cannot be read"),
                            HttpStatus.CONFLICT);
                }
            }
            ...
            @PostMapping(value = "/save/photo/{id}", headers = "Content-Type=multipart/form-data")
            public ResponseEntity<?> savePhoto(@PathVariable(name = "id") Long id, @RequestParam("photo") MultipartFile photo) {
                try {
                    if (id == null)
                        return new ResponseEntity<ErrorMessage>(new ErrorMessage("Please set id"), HttpStatus.CONFLICT);
                    if (photo == null)
                        return new ResponseEntity<ErrorMessage>(new ErrorMessage("Please send file photo"),
                                HttpStatus.CONFLICT);
                    Person person = personService.findById(id);
                    if (person == null)
                        return new ResponseEntity<ErrorMessage>(new ErrorMessage("Person not found"), HttpStatus.NOT_FOUND);
                    if (!person.getPhoto().isEmpty())
                        fileSystemService.delete(person.getPhoto());
                    person.setPhoto(fileSystemService.copy(photo));
                    this.personService.save(person);
                    return new ResponseEntity<Object>(HttpStatus.OK);
                } catch (NoSuchElementException ex) {
                    return new ResponseEntity<ErrorMessage>(new ErrorMessage("Person not found"), HttpStatus.NOT_FOUND);
                } catch (IOException e) {
                    return new ResponseEntity<ErrorMessage>(new ErrorMessage("File cannot be saved"),
                            HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        }
    



    



