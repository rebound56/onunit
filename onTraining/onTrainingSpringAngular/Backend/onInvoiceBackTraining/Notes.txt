1) Creation of project
    - Name of project : onInvoiceBackTraining
    - Packing: jar
    - Modules added:
        - H2
        - MySQL
        - JPA
        - Web
2) Creation of entity Person
    - in com.oninvoice.models.entities.Person.java
        package com.oninvoice.models.entities;

        import java.io.Serializable;
        import java.util.Date;

        import javax.persistence.Column;
        import javax.persistence.Entity;
        import javax.persistence.GeneratedValue;
        import javax.persistence.GenerationType;
        import javax.persistence.Id;
        import javax.persistence.PrePersist;
        import javax.persistence.PreUpdate;
        import javax.persistence.Table;
        import javax.persistence.Temporal;
        import javax.persistence.TemporalType;
        import javax.validation.constraints.Email;
        import javax.validation.constraints.NotEmpty;
        import javax.validation.constraints.NotNull;

        @Entity
        @Table
        public class Person implements Serializable {
            /**
            * 
            */
            private static final long serialVersionUID = -2884708955221489221L;

            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private Long id;

            @Column
            @NotNull
            @NotEmpty
            private String name;

            @Column(name = "last_name")
            @NotNull
            @NotEmpty
            private String lastName;

            @Column
            @NotNull
            @NotEmpty
            @Email
            private String email;

            @Column
            @NotNull
            @NotEmpty
            private String phone;

            @Column
            @NotNull
            @NotEmpty
            private String gender;

            @Column(name = "number_document")
            @NotNull
            @NotEmpty
            private String numberDocument;

            @Column(name = "created_at")
            @Temporal(TemporalType.DATE)
            @NotNull
            private Date createAt;

            @Column(name = "modified_at")
            @Temporal(TemporalType.DATE)
            @NotNull
            private Date modifiedAt;

            public Person() {
                super();
            }
            
            @PrePersist
            public void prePersist() {
                this.createAt = new Date();
                preUpdate();
            }

            @PreUpdate
            public void preUpdate() {
                this.modifiedAt = new Date();
            }

            // getters, setters, equals, hascode and toString

        }

3) Creation of DAO
    - in com.oninvoice.models.daos.IPersonDao.java
        package com.oninvoice.models.daos;

        import org.springframework.data.repository.PagingAndSortingRepository;

        import com.oninvoice.models.entities.Person;

        public interface IPersonDao extends PagingAndSortingRepository<Person, Long>{

        }
4) Creation of service
    - in com.oninvoice.models.services.IPersonService.java
        package com.oninvoice.models.services;

        import org.springframework.data.domain.Page;
        import org.springframework.data.domain.Pageable;

        import com.oninvoice.models.entities.Person;

        public interface IPersonService {
            /**
            * This method returns a Page<Person>
            * 
            * @return
            */
            public Page<Person> findAll(Pageable pageable);

            /**
            * This method find a person by id
            * 
            * @param id
            * @return
            */
            public Person findById(Long id);

            /**
            * This method saves a person
            * 
            * @param person
            */
            public void save(Person person);

            /**
            * This method deletes a person
            * 
            * @param person
            */
            public void delete(Person person);
        }
    - in com.oninvoice.models.services.PersonService.java
        package com.oninvoice.models.services;

        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.data.domain.Page;
        import org.springframework.data.domain.Pageable;
        import org.springframework.stereotype.Service;
        import org.springframework.transaction.annotation.Transactional;

        import com.oninvoice.models.daos.IPersonDao;
        import com.oninvoice.models.entities.Person;

        @Service
        public class PersonService implements IPersonService {
            @Autowired
            IPersonDao personDao;

            @Override
            @Transactional(readOnly=true)
            public Page<Person> findAll(Pageable pageable) {
                return this.personDao.findAll(pageable);
            }

            @Override
            @Transactional(readOnly=true)
            public Person findById(Long id) {
                return personDao.findById(id).get();
            }

            @Override
            @Transactional
            public void save(Person person) {
                personDao.save(person);
            }

            @Override
            @Transactional
            public void delete(Person person) {
                personDao.delete(person);
            }

        }
5) Creation of controller
    - in com.oninvoice.controllers.PersonController.java
        package com.oninvoice.controllers;
        import java.util.Map;
        import java.util.NoSuchElementException;

        import org.h2.util.StringUtils;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.data.domain.Page;
        import org.springframework.data.domain.PageRequest;
        import org.springframework.data.domain.Pageable;
        import org.springframework.http.HttpStatus;
        import org.springframework.http.ResponseEntity;
        import org.springframework.stereotype.Controller;
        import org.springframework.web.bind.annotation.DeleteMapping;
        import org.springframework.web.bind.annotation.GetMapping;
        import org.springframework.web.bind.annotation.PathVariable;
        import org.springframework.web.bind.annotation.PostMapping;
        import org.springframework.web.bind.annotation.RequestBody;
        import org.springframework.web.bind.annotation.RequestMapping;
        import org.springframework.web.bind.annotation.RequestParam;

        import com.oninvoice.models.entities.Person;
        import com.oninvoice.models.services.IPersonService;
        import com.oninvoice.util.ErrorMessage;

        @Controller
        @RequestMapping("/person")
        public class PersonController {

            @Autowired
            private IPersonService personService;

            @GetMapping(value = "/get/all")
            public ResponseEntity<Page<Person>> getAll(@RequestParam Map<String, String> mapRequest) {
                int page = 0;
                int size = 5;
                if (mapRequest != null && mapRequest.get("page") != null && StringUtils.isNumber(mapRequest.get("page")))
                    page = Integer.parseInt(mapRequest.get("page"));
                if (mapRequest != null && mapRequest.get("size") != null && StringUtils.isNumber(mapRequest.get("size")))
                    size = Integer.parseInt(mapRequest.get("size"));

                Pageable pageable = PageRequest.of(page, size);
                Page<Person> list = personService.findAll(pageable);
                return new ResponseEntity<Page<Person>>(list, HttpStatus.OK);
            }

            @GetMapping(value = "/get/{id}")
            public ResponseEntity<?> getById(@PathVariable(name = "id") Long id) {
                try {
                    if (id == null)
                        return new ResponseEntity<ErrorMessage>(new ErrorMessage("Please set id"), HttpStatus.CONFLICT);
                    Person person = personService.findById(id);
                    if (person == null)
                        return new ResponseEntity<ErrorMessage>(new ErrorMessage("Person not found"), HttpStatus.NOT_FOUND);
                    return new ResponseEntity<Person>(person, HttpStatus.OK);
                } catch (NoSuchElementException ex) {
                    return new ResponseEntity<ErrorMessage>(new ErrorMessage("Person not found"), HttpStatus.NOT_FOUND);
                }
            }

            @PostMapping(value = "/save")
            public ResponseEntity<?> save(@RequestBody Person person) {
                try {
                    if (person == null)
                        return new ResponseEntity<ErrorMessage>(new ErrorMessage("Please set person"), HttpStatus.CONFLICT);
                    personService.save(person);
                    return new ResponseEntity<Person>(person, HttpStatus.OK);
                } catch (Exception ex) {
                    return new ResponseEntity<ErrorMessage>(
                            new ErrorMessage("Error in some validations: " + ex.getLocalizedMessage()),
                            HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }

            @DeleteMapping(value = "/delete/{id}")
            public ResponseEntity<?> delete(@PathVariable(name = "id") Long id) {
                try {
                    if (id == null)
                        return new ResponseEntity<ErrorMessage>(new ErrorMessage("Please set id"), HttpStatus.CONFLICT);
                    Person person = personService.findById(id);
                    if (person == null)
                        return new ResponseEntity<ErrorMessage>(new ErrorMessage("Person not found"), HttpStatus.NOT_FOUND);
                    personService.delete(person);
                    return new ResponseEntity<Object>(HttpStatus.OK);
                } catch (NoSuchElementException ex) {
                    return new ResponseEntity<ErrorMessage>(new ErrorMessage("Person not found"), HttpStatus.NOT_FOUND);
                }

            }
        }

6) Optimizing queries
    - if we leave queries without optimization , the orm will execute more than one query. Therefore, it is very important to optimize queries
        - Example
            @Query(value="SELECT i FROM Invoice i JOIN FETCH i.person p JOIN FETCH i.listItem l JOIN FETCH l.product WHERE i.id = :id")
	        public Invoice fetchByIdWithPersonWithListItemWithProduct(@Param("id")Long id);

            - We use JOIN FETCH to create a inner join with the Table
            - We could use LEFT JOIN FETCH to create a left join with the Table
7) Spring security
    - Install the framework , it offers:
        - Authentication
        - Authorization (control list access through roles)
        -logout
        - Autentication on memory or database
        - by default the provide a table user
    - Adding dependencies in pom.xml
        <dependencies>
            ....
            <dependency>
			    <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-security</artifactId>
            </dependency>

            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt</artifactId>
                <version>0.9.0</version>
            </dependency>
            ....
        </dependencies>
    - Run as maven Install
    - JWT is a standard of authentication the page is jwt.io , the token has trhee parts separated by period (.)
    - We are gonna work with JWT:
        - First we are gonna create two entities User and Role like this
            - in com.oninvoice.models.entities.Role

                @Entity
                @Table
                public class Role implements Serializable {
                    ...
                    @Id
                    @GeneratedValue(strategy = GenerationType.IDENTITY)
                    private Long id;
                    private String authority;
                    ...
                }

             - in com.oninvoice.models.entities.User

                @Entity
                @Table
                public class User implements Serializable {
                    ...
                    @Id
                    @GeneratedValue(strategy = GenerationType.IDENTITY)
                    private Long id;

                    @Column
                    @NotNull
                    private String username;

                    @Column
                    @NotNull
                    private String password;

                    @Column
                    @NotNull
                    private Boolean enabled;

                    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
                    @JoinColumn(name = "user_id")
                    private List<Role> roleList;

                    @Column(name = "created_at")
                    @Temporal(TemporalType.DATE)
                    @NotNull
                    private Date createdAt;

                    @Column(name = "modified_at")
                    @Temporal(TemporalType.DATE)
                    @NotNull
                    private Date modifiedAt;
                    ....
                }

        - Third we are gonna build a new interface Dao 
            - in com.invoice.models.daos.IUserDao

                public interface IUserDao extends JpaRepository<User, Long> {
                    public User findByUsername(String username);
                }

        - Forth we are gonna build a new service that implements UserDetail.
        - Note: this service is gonna execute when a user is loggin in
            - in com.oninvoice.models.services.UserService
                @Service
                public class UserService implements UserDetailsService{
                    @Autowired
                    private IUserDao userDao;

                    @Override
                    @Transactional(readOnly = true)
                    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {

                        User user = userDao.findByUsername(username);

                        if (user == null)
                            throw new UsernameNotFoundException("Username " + username + " does not exist in the system");

                        if (user.getRoleList() == null || user.getRoleList().size() == 0)
                            throw new UsernameNotFoundException("Username '" + username + "' does not have roles");

                        List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();
                        for (Role role : user.getRoleList())
                            authorities.add(new SimpleGrantedAuthority(role.getAuthority()));

                        return new org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(),
                                user.getEnabled(), true, true, true, authorities);
                    }
                }
        - Fifth: it is necessary to create a service with the JWT operations
            - in com.oninvoice.models.api.IJwtApi
                public interface IJwtApi {
                  
                    public String create(Authentication authentication) throws JsonProcessingException;                   
                    public boolean validate(String token);
                    public Claims getClaims(String token);                   
                    public String getUsername(String token);                   
                    public List<GrantedAuthority> getAuthorities(String token) throws IOException;                    
                    public String resolve(String token);
                }
            - in com.oninvoice.models.api.JwtService
                @Service
                public class JwtService implements IJwtApi {

                    @Override
                    public String create(Authentication authentication) throws JsonProcessingException {

                        String username = ((User) authentication.getPrincipal()).getUsername();
                        Collection<? extends GrantedAuthority> roles = authentication.getAuthorities();
                        Claims claims = Jwts.claims();
                        claims.put("authorities", new ObjectMapper().writeValueAsString(roles));
                        claims.setSubject(username);

                        return Jwts.builder().setIssuedAt(new Date()).setClaims(claims)
                                .setExpiration(new Date(System.currentTimeMillis() + SecurityConstants.EXPIRATION_TIME))
                                .signWith(SignatureAlgorithm.HS512, SecurityConstants.SECRET.getBytes()).compact();
                    }

                    @Override
                    public boolean validate(String token) {
                        try {
                            getClaims(token);
                            return true;
                        } catch (JwtException | IllegalArgumentException ex) {
                            return false;
                        }
                    }

                    @Override
                    public Claims getClaims(String token) {
                        return Jwts.parser().setSigningKey(SecurityConstants.SECRET.getBytes())
                                .parseClaimsJws(resolve(token)).getBody();
                    }

                    @Override
                    public String getUsername(String token) {
                        return getClaims(token).getSubject();
                    }

                    @Override
                    public List<GrantedAuthority> getAuthorities(String strToken) throws IOException {
                        Claims token = getClaims(strToken);
                        Object roles = token.get("authorities");
                        List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();
                        Role[] listRole = new ObjectMapper().readValue(roles.toString().getBytes(), Role[].class);
                        if (listRole != null) {
                            for (Role role : listRole) {
                                authorities.add(new SimpleGrantedAuthority(role.getAuthority()));
                            }
                        }
                        return authorities;
                    }

                    @Override
                    public String resolve(String token) {
                        if (token != null && token.startsWith(SecurityConstants.TOKEN_PREFIX))
                            return token.replace(SecurityConstants.TOKEN_PREFIX, "");
                        return null;
                    }
                }
        - Sisxth : we are gonn create the filters
            - but first we are gonna build the SecurityConstants
                package com.oninvoice.security;

                public class SecurityConstants {
                    public static final String SECRET = "SecretKeyToGenJWTs";
                    public static final long EXPIRATION_TIME = 864_000_000; // 10 days
                    public static final String TOKEN_PREFIX = "Bearer ";
                    public static final String HEADER_STRING = "Authorization";
                    public static final String LOGIN_URL = "/api/user/login";
                }

            - in com.oninvoice.security.AuthenticationFilter
                public class AuthenticationFilter extends UsernamePasswordAuthenticationFilter {

                    /** It allows to authenticate */
                    private AuthenticationManager authenticationManager;
                    private IJwtApi jwtService;

                    public AuthenticationFilter(AuthenticationManager authenticationManager, IJwtApi jwtService) {
                        this.authenticationManager = authenticationManager;
                        this.jwtService = jwtService;
                        setRequiresAuthenticationRequestMatcher(new AntPathRequestMatcher(SecurityConstants.LOGIN_URL, "POST"));
                    }

                    @Override
                    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)
                            throws AuthenticationException {

                        String username = obtainUsername(request);
                        String password = obtainPassword(request);

                        if (username == null || password == null) {
                            try {
                                com.oninvoice.models.entities.User user = new ObjectMapper().readValue(request.getInputStream(),
                                        com.oninvoice.models.entities.User.class);
                                if (user != null) {
                                    username = user.getUsername();
                                    password = user.getPassword();
                                }

                            } catch (IOException e) {				
                                logger.error("Error to try parse json to user", e);
                            }
                        }

                        UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(username, password);
                        return this.authenticationManager.authenticate(authToken);
                    }

                    @Override
                    protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain,
                            Authentication authentication) throws IOException, ServletException {

                        String token = this.jwtService.create(authentication);

                        String username = ((User) authentication.getPrincipal()).getUsername();

                        response.addHeader(SecurityConstants.HEADER_STRING, SecurityConstants.TOKEN_PREFIX + token);
                        Map<String, Object> body = new HashMap<String, Object>();
                        body.put("token", token);
                        body.put("user", username);
                        body.put("message", String.format("Hello %s has logged up!", username));

                        response.getWriter().write(new ObjectMapper().writeValueAsString(body));
                        response.setStatus(200);
                        response.setContentType("application/json");
                    }

                    @Override
                    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,
                            AuthenticationException failed) throws IOException, ServletException {

                        Map<String, Object> body = new HashMap<String, Object>();
                        body.put("message", "Username or password incorrect");
                        body.put("error", failed.getMessage());

                        response.getWriter().write(new ObjectMapper().writeValueAsString(body));
                        response.setStatus(401);
                        response.setContentType("application/json");
                    }

                }
            - in com.oninvoice.security.AuthorizationFilter
                public class AuthorizationFilter extends BasicAuthenticationFilter {

                    private IJwtApi jwtService;

                    public AuthorizationFilter(AuthenticationManager authenticationManager, IJwtApi jwtService) {
                        super(authenticationManager);
                        this.jwtService = jwtService;
                    }

                    @Override
                    protected void doFilterInternal(HttpServletRequest req, HttpServletResponse res, FilterChain chain)
                            throws IOException, ServletException {
                        
                        String header = req.getHeader(SecurityConstants.HEADER_STRING);
                        if (!requiresAuthentication(header)) {
                            chain.doFilter(req, res);
                            return;
                        }
                        
                        UsernamePasswordAuthenticationToken authentication = null;
                        if (this.jwtService.validate(header))
                            authentication = new UsernamePasswordAuthenticationToken(this.jwtService.getAuthorities(header), null,
                                    this.jwtService.getAuthorities(header));

                        SecurityContextHolder.getContext().setAuthentication(authentication);
                        chain.doFilter(req, res);

                    }

                    protected boolean requiresAuthentication(String header) {
                        if (header == null || !header.startsWith(SecurityConstants.TOKEN_PREFIX))
                            return false;
                        return true;
                    }
                }

         - Seventh : We create the spring configuration to assemble the filters 
            - in com.oninvoice.SpringSecurityConfig
                @Configuration
                @EnableWebSecurity
                @EnableGlobalMethodSecurity(securedEnabled = true)
                public class SpringSecurityConfig extends WebSecurityConfigurerAdapter {

                    @Autowired
                    private UserService userService;

                    @Autowired
                    private IJwtApi jwtService;

                    @Autowired
                    private BCryptPasswordEncoder passwordEncoder;

                    @Override
                    protected void configure(HttpSecurity http) throws Exception {
                        http.cors().and().csrf().disable().authorizeRequests().antMatchers(SecurityConstants.LOGIN_URL).permitAll()
                                .anyRequest().authenticated().and()
                                .addFilter(new AuthenticationFilter(authenticationManager(), jwtService))
                                .addFilter(new AuthorizationFilter(authenticationManager(), jwtService)).sessionManagement()
                                .sessionCreationPolicy(SessionCreationPolicy.STATELESS);
                    }

                    @Override
                    public void configure(AuthenticationManagerBuilder auth) throws Exception {
                        auth.userDetailsService(userService).passwordEncoder(passwordEncoder);
                    }
                }

            



    