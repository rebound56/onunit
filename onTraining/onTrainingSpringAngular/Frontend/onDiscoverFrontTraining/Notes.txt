1) Create project
    >ng new onDiscoverFrontTraining

2) Create a class
    >ng generate class models/person

3) Create person
    >ng generate component components/Person 

4) Creating routing
    >ng generate module modules/AppRouting --module=app
    - in app-routing.module.ts:
        import { NgModule } from '@angular/core';
        import { RouterModule, Routes } from '@angular/router';
        import { PersonComponent} from '../../components/person/person.component';


        const routes: Routes = [
        { path: 'person', component: PersonComponent }
        ];
        @NgModule({  
        exports: [RouterModule],
        imports: [ RouterModule.forRoot(routes) ]
        })
        export class AppRoutingModule { }

5) Creating a form with standard validators
    - in person.component.ts

        import { Component, OnInit } from '@angular/core';
        import { Person } from '../../models/person';
        import { FormGroup, FormControl, Validators } from '@angular/forms';        

        @Component({
            selector: 'app-person',
            templateUrl: './person.component.html',
            styleUrls: ['./person.component.css']
        })
        export class PersonComponent implements OnInit {

            person : Person = {
                id:1,
                name:'Mauro',
                lastName: 'German',
                email: 'mauro.german@ondiscover.com',
                numberDocument: '1234567',
                gender: ''
            }   

            formPerson: FormGroup;
            controlName: FormControl;

            ngOnInit() {
                // to add new validators
                this.controlName = new FormControl(this.person.name,[
                    Validators.required,
                    Validators.minLength(3),
                    Validators.maxLength(150)
                ]);
                this.formPerson = new FormGroup({
                    controlName:this.controlName          
                });
            }
        }
    
    - in person.component.html
        <form [formGroup]="formPerson"  (ngSubmit)="save()">
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        <label for="name">Name</label>
                        <input type="text" name="name" 
                        placeholder="Name" class="form-control" formControlName="controlName" [(ngModel)]="person.name" />
                        
                        <div class="alert alert-danger" *ngIf="controlName.errors && (controlName.dirty || controlName.touched)">
                            <p *ngIf="controlName.errors.required">Name is required</p>
                            <p *ngIf="controlName.errors.minlength">Name must be greater than 3 characters long</p>
                            <p *ngIf="controlName.errors.maxlength">Name must be lesser than 150 characters long</p>
                        </div>
                        
                    </div>
                </div>
            </div>
        </form>

6) Custom validators
    - Create a util class called CustomValidator
        >ng generate class utils/CustomValidator
    - in custom-validator.ts
        import { ValidatorFn, ValidationErrors } from "@angular/forms/src/directives/validators";
        import { AbstractControl, FormControl } from "@angular/forms/src/model";

        export class CustomValidator {
            static match(controlToCompare :FormControl) : ValidatorFn {
                return (control : AbstractControl): {[key: string]: boolean} => {        
                    let value = control.value;
                    if(value === controlToCompare.value){
                        return null;
                    }
                    return {'match': true}; 
                }
            }
        }
    - in person.component.ts
        import { CustomValidator } from '../../utils/custom-validator';
        import { FormGroup, FormControl, Validators } from '@angular/forms';


        @Component({
        selector: 'app-person',
        templateUrl: './person.component.html',
        styleUrls: ['./person.component.css']
        })
        export class PersonComponent implements OnInit {
            ...
            formPerson: FormGroup;
            controlNumberDocument: FormControl;
            controlMatchNumberDocument: FormControl;
            ...
            ngOnInit() {
                this.controlNumberDocument = new FormControl(this.person.numberDocument,[
                    Validators.required,
                    Validators.minLength(3),
                    Validators.maxLength(20),                
                ]);
                this.controlMatchNumberDocument= new FormControl(this.person.numberDocument,[
                    CustomValidator.match(this.controlNumberDocument)       
                ]);

                this.formPerson = new FormGroup({                    
                    controlNumberDocument:this.controlNumberDocument,
                    controlMatchNumberDocument: this.controlMatchNumberDocument,                   
                })                   
            }
        }
    - in person.component.html
         <form [formGroup]="formPerson"  (ngSubmit)="save()">
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        <label for="numberDocument">Number of document</label>
                        <input type="text" (keyup)="controlMatchNumberDocument.updateValueAndValidity()" name="numberDocument" formControlName="controlNumberDocument" [(ngModel)]="person.numberDocument" placeholder="Number of document" class="form-control"/>
                        <div class="alert alert-danger" *ngIf="controlNumberDocument.errors && (controlNumberDocument.dirty || controlNumberDocument.touched)">
                            <p *ngIf="controlNumberDocument.errors.required">E-mail is required</p>
                            <p *ngIf="controlNumberDocument.errors.minlength">E-mail must be greater than 3 characters long</p>
                            <p *ngIf="controlNumberDocument.errors.maxlength">E-mail must be lesser than 200 characters long</p>          
                        </div>
                    </div>
                </div>

                <div class="col-sm-4">
                    <div class="form-group">
                        <label for="MatchNumberDocument">Confirm number of document</label>
                        <input type="text" name="MatchNumberDocument" formControlName="controlMatchNumberDocument" placeholder="Confirm number of document" class="form-control"/>
                        <div class="alert alert-danger" *ngIf="controlMatchNumberDocument.errors && (controlMatchNumberDocument.dirty || controlMatchNumberDocument.touched)">
                            <p *ngIf="controlMatchNumberDocument.errors.match">It must match with number document</p> 
                        </div>
                    </div>
                </div>
            </div>
        </form>    
7) Trigger validators on submit
    - Create  classs called utils/FormUtil
        >ng generate class utils/FormUtil
    - in utils/form-util.ts 
        import { FormGroup, FormControl } from '@angular/forms';
        export class FormUtil {
            static validateFormFields(formGroup: FormGroup){
                Object.keys(formGroup.controls).forEach(field => {
                    var control = formGroup.get(field);
                    if(control instanceof FormControl){
                        control.markAsTouched({onlySelf:true});
                    }else if (control instanceof FormGroup){
                        FormUtil.validateFormFields(control);
                    }
                });
            }
        }
    - in person.component.ts
        save () {
            if(this.formPerson.valid){
            alert("Saved!");
            }else{
            FormUtil.validateFormFields(this.formPerson);
            }
        }

8) Handle validation errors
    - In utils/form.util.ts I created two static methods
        /**
        * It allows to validate if a formcontrol has errors
        * @param formControl 
        */
        static hasErrors(formControl : FormControl){
            return formControl.errors && (formControl.dirty || formControl.touched);
        } 

        /**
        * It allows to validate if a formcontrol has a specific error
        * @param formControl 
        * @param error 
        */
        static hasError(formControl : FormControl, error?:string){
            return FormUtil.hasErrors(formControl) && formControl.errors[error];
        } 

    - In person.component.ts create methods to handle validators errors
        hasErrors(formControl : FormControl){
            return FormUtil.hasErrors(formControl);
        } 

        hasError(formControl : FormControl, error?:string){
            return FormUtil.hasError(formControl,error);
        } 

    - In person.component.html implement the methods
        <div class="col-md-3">
            <div class="form-group" [ngClass]="{'has-error': hasErrors(controlNumberDocument)}">      
                <label for="numberDocument" class="form-control-label">Number of document</label>
                <input type="text" class="form-control" name="numberDocument" placeholder="Number of document" formControlName="controlNumberDocument" [(ngModel)]="person.numberDocument" (keyup)="controlMatchNumberDocument.updateValueAndValidity()"/>
                <div class="form-control-feedback">
                    <small *ngIf="hasError(controlNumberDocument,'required')">Number of document is required</small>
                    <small *ngIf="hasError(controlNumberDocument,'minlength')">Number of document must be greater than 3 characters long</small>
                    <small *ngIf="hasError(controlNumberDocument,'maxlength')">Number of document must be lesser than 200 characters long</small>            
                </div> 
            </div>
        </div>
9) Adding moment.js to handle dates
    - Adding the moment.js to the project to handle dates
        > npm install moment --save

10) Adding service to get person information with onDiscoverBack
    - I executed the command
        >ng g s services/person
    - In app.module.ts , I decided to add in Providers the service and import the HttpClientModule to use for making request by http
        ...
        import { PersonService } from './services/person.service';
        import { HttpClientModule } from '@angular/common/http';
        ...
        @NgModule({
        ...
        imports: [
            ...
            HttpClientModule
        ],
        providers: [
            PersonService
        ],
        ...
        })
        export class AppModule { }

    - In services/person.service.ts
        import { Injectable } from '@angular/core';
        import {HttpClient} from '@angular/common/http';
        @Injectable()
        export class PersonService {
            constructor(private http : HttpClient){ }  
            getListPerson(){
            return this.http.get('http://localhost:8080/person/');
            }
        }
    - In components/list-person.component.ts
        import { Component, OnInit } from '@angular/core';
        import { PersonService } from '../../services/person.service';

        @Component({
        selector: 'app-list-person',
        templateUrl: './list-person.component.html',
        styleUrls: ['./list-person.component.css']
        })
        export class ListPersonComponent implements OnInit {
        listPerson : any;
            constructor(private personService: PersonService) {}
            ngOnInit() {
                this.listPerson = [];
                this.personService.getListPerson()
                .subscribe(
                    (result)=>{
                    this.listPerson = result;
                    }, 
                    (error) => {
                    console.log("ERROR "+error)          
                });
            }
        }    
    - In components/list-person.component.html
         <div class="jumbotron">
            <h1>List person</h1>
            <div class="table-responsive">
                <table class="table table-striped table-dark table-bordered table-hover table-sm">
                <thead class="thead-dark">
                    <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Last name</th>
                    <th scope="col">Number document</th>
                    <th scope="col">E-mail</th>
                    <th scope="col">Birth date</th>
                    <th scope="col">Issue date</th>
                    </tr>
                </thead>
                <tbody>
                    <tr *ngFor="let person of listPerson">
                        <td scope="row">{{person.name}}</td>
                        <td scope="row">{{person.lastName}}</td>
                        <td scope="row">{{person.numberDocument}}</td>
                        <td scope="row">{{person.email}}</td>
                        <td scope="row">{{person.birthDate}}</td>
                        <td scope="row">{{person.issueDate}}</td>
                    </tr>
                </tbody>
                </table>
            </div>
        </div>
9) Load person information to the page
    - In person.service.ts
        import { Injectable } from '@angular/core';
        import {HttpClient} from '@angular/common/http';
        @Injectable()
        export class PersonService {
            constructor(private http : HttpClient){ }  
            /** It returns a list of person */
            getListPerson(){
            return this.http.get('http://localhost:8080/person/');
            }
            /** It returns a specific person */
            get(id :number){
            return this.http.get('http://localhost:8080/person/'+id);
            }
        }
    - In person.component.ts , I had to create a boolean variable to show the form when it is prepared so:
        ...
        export class PersonComponent implements OnInit {
            ...
            // boolean identifies if form is prepared
            formPrepared: boolean = false;    
            ...
            constructor(private route : ActivatedRoute, private personService : PersonService) {}

            ngOnInit() {    
                this.initLists();
                this.initPerson();
            }

            /** It initializes the person */
            initPerson(){
                let id = this.route.snapshot.params["id"];
                if(id != undefined){
                if(NumberUtil.isNumber(id)){
                    this.personService.get(id).subscribe((result :Person )=>{
                    // the service has been succesful        
                    this.initForm(result);        
                    }, (error) => {
                    // the service has failed
                    debugger;
                    console.log("error: ", error);
                    });
                }else{
                    // id is not numeric
                    debugger;
                }
                }else{
                // id doesn't exist
                this.initForm(new Person());    
                }
            }


            /** It initializes the form */
            initForm(person : Person){
                // initializes the person
                this.person = person;
                // initializing every control
                this.controlName = new FormControl(this.person.name);
                this.controlLastName = new FormControl(this.person.lastName);
                this.controlEmail = new FormControl(this.person.email);
                this.controlNumberDocument = new FormControl(this.person.numberDocument);
                this.controlGender = new FormControl(this.person.gender);
                this.controlMatchNumberDocument= new FormControl('');
                this.controlIssueDate = new FormControl(this.person.issueDate);
                this.controlBirthDate = new FormControl(this.person.birthDate);    
                // setting validators
                this.controlName.setValidators([ 
                Validators.required,      
                Validators.maxLength(150)
                ]);
                this.controlLastName.setValidators([ 
                Validators.required,      
                Validators.maxLength(200)
                ]);
                this.controlEmail.setValidators([ 
                Validators.required,
                Validators.maxLength(150),
                Validators.email
                ]);
                this.controlNumberDocument.setValidators([ 
                Validators.required,
                Validators.minLength(3),
                Validators.maxLength(20),      
                ]);
                this.controlGender.setValidators([ 
                Validators.required        
                ]);
                this.controlMatchNumberDocument.setValidators([
                CustomValidator.match(this.controlNumberDocument)       
                ]);
                this.controlIssueDate.setValidators([
                Validators.required,
                Validators.nullValidator,
                CustomValidator.mindate(this.controlBirthDate)
                ]);
                this.controlBirthDate.setValidators([
                Validators.required,
                Validators.nullValidator,
                CustomValidator.maxdate(this.controlIssueDate)     
                ]);
                // add controls to form
                this.formPerson = new FormGroup({
                controlName:this.controlName,
                controlLastName:this.controlLastName,
                controlEmail:this.controlEmail,
                controlNumberDocument:this.controlNumberDocument,
                controlMatchNumberDocument: this.controlMatchNumberDocument,
                controlGender:this.controlGender,
                controlBirthDate:this.controlBirthDate,
                controlIssueDate:this.controlIssueDate
                })   ;
                // set form prepared as true
                this.formPrepared = true; 
            }
    - In person.component.html
        <div class="jumbotron">
        <h1>Person</h1>
        <form [formGroup]="formPerson"  (ngSubmit)="save()" *ngIf="formPrepared">
            ...
        </form>

10) http loader 
    - execute
        >npm install ng-http-loader@0.9.1 --save 
    - in app.module
        ..
        import { NgHttpLoaderModule } from 'ng-http-loader/ng-http-loader.module';
        ..
        imports: [
            ...
            NgHttpLoaderModule
        ],
    - add spiner on app.component.html
        <spinner></spinner>

11) adding toaster
    - execute
        npm install angular5-toaster --save
    - in angular-cli.json in style we add the style of toaster
        "styles": [
            "styles.css",
            "assets/form.css",
            "../node_modules/angular5-toaster/dist/toaster.css"
        ],
    - import toastermodule in app.module.ts
        import {ToasterModule} from 'angular5-toaster';
        import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
        ...
        imports: [
            ToasterModule,
            BrowserAnimationsModule
        ]
    - add a tag html in app.component.html
        <toaster-container></toaster-container>
    - how to implement, in person.component.ts
        ...
        import {ToasterService} from 'angular5-toaster';
        ...
        constructor(.. private toasterService : ToasterService) {}
        ...
        /** It saves person */
        save () {
            if(this.formPerson.valid){
            this.personService.save(this.person).subscribe((result : any)=> {
                this.toasterService.pop('success', 'Person saved', 'The person has been saved succesful!');
                this.router.navigate(['/person/form/'+result.id]);
            }, (error) =>{
                this.toasterService.pop('error', "Person did not save", 'The person has not been saved');
            })
            }else{
                FormUtil.validateFormFields(this.formPerson);
            }
        }
        


    