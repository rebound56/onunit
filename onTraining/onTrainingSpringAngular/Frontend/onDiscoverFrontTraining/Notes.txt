1) Create project
    >ng new onDiscoverFrontTraining

2) Create a class
    >ng generate class models/person

3) Create person
    >ng generate component components/Person 

4) Creating routing
    >ng generate module modules/AppRouting --module=app
    - in app-routing.module.ts:
        import { NgModule } from '@angular/core';
        import { RouterModule, Routes } from '@angular/router';
        import { PersonFormComponent} from '../../components/person/person-form.component';


        const routes: Routes = [
            { path: 'person/form', component: PersonFormComponent }
            { path: 'person/form/:id', component: PersonFormComponent }
            { path: 'person/list', component: PersonListComponent }
            { path: 'person/detail/:id', component: PersonDetailComponent }
        ];
        @NgModule({  
        exports: [RouterModule],
        imports: [ RouterModule.forRoot(routes) ]
        })
        export class AppRoutingModule { }

5.1) Get bootstrap
    - execute
        npm install bootstrap@4.0.0 font-awesome@4.7.0
    - in .angular-cli.json
        {
            "apps": [
                {
                "root": "src",
                "styles": [
                    "../node_modules/bootstrap/dist/css/bootstrap.min.css",
                    "../node_modules/font-awesome/css/font-awesome.css",
                    "styles.css"
                ]
                }
            ]
        }

        
5.2) Creating a form with standard validators
    - in person-form.component.ts

        import { Component, OnInit } from '@angular/core';
        import { Person } from '../../models/person';
        import { FormGroup, FormControl, Validators } from '@angular/forms';        

        @Component({
            selector: 'app-person',
            templateUrl: './person-form.component.html',
            styleUrls: ['./person-form.component.css']
        })
        export class PersonFormComponent implements OnInit {

            person : Person = {
                id:1,
                name:'Mauro',
                lastName: 'German',
                email: 'mauro.german@ondiscover.com',
                numberDocument: '1234567',
                gender: ''
            }   

            formPerson: FormGroup;
            controlName: FormControl;

            ngOnInit() {
                // to add new validators
                this.controlName = new FormControl(this.person.name,[
                    Validators.required,
                    Validators.minLength(3),
                    Validators.maxLength(150)
                ]);
                this.formPerson = new FormGroup({
                    controlName:this.controlName          
                });
            }
        }
    
    - in person-form.component.html
        <form [formGroup]="formPerson"  (ngSubmit)="save()">
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        <label for="name">Name</label>
                        <input type="text" name="name" 
                        placeholder="Name" class="form-control" formControlName="controlName" [(ngModel)]="person.name" />
                        
                        <div class="alert alert-danger" *ngIf="controlName.errors && (controlName.dirty || controlName.touched)">
                            <p *ngIf="controlName.errors.required">Name is required</p>
                            <p *ngIf="controlName.errors.minlength">Name must be greater than 3 characters long</p>
                            <p *ngIf="controlName.errors.maxlength">Name must be lesser than 150 characters long</p>
                        </div>
                        
                    </div>
                </div>
            </div>
        </form>

6) Custom validators
    - Create a util class called CustomValidator
        >ng generate class utils/CustomValidator
    - in custom-validator.ts
        import { ValidatorFn, ValidationErrors } from "@angular/forms/src/directives/validators";
        import { AbstractControl, FormControl } from "@angular/forms/src/model";

        export class CustomValidator {
            static match(controlToCompare :FormControl) : ValidatorFn {
                return (control : AbstractControl): {[key: string]: boolean} => {        
                    let value = control.value;
                    if(value === controlToCompare.value){
                        return null;
                    }
                    return {'match': true}; 
                }
            }
        }
    - in person-form.component.ts
        import { CustomValidator } from '../../utils/custom-validator';
        import { FormGroup, FormControl, Validators } from '@angular/forms';


        @Component({
        selector: 'app-person',
        templateUrl: './person-form.component.html',
        styleUrls: ['./person-form.component.css']
        })
        export class PersonFormComponent implements OnInit {
            ...
            formPerson: FormGroup;
            controlNumberDocument: FormControl;
            controlMatchNumberDocument: FormControl;
            ...
            ngOnInit() {
                this.controlNumberDocument = new FormControl(this.person.numberDocument,[
                    Validators.required,
                    Validators.minLength(3),
                    Validators.maxLength(20),                
                ]);
                this.controlMatchNumberDocument= new FormControl(this.person.numberDocument,[
                    CustomValidator.match(this.controlNumberDocument)       
                ]);

                this.formPerson = new FormGroup({                    
                    controlNumberDocument:this.controlNumberDocument,
                    controlMatchNumberDocument: this.controlMatchNumberDocument,                   
                })                   
            }
        }
    - in person-form.component.html
         <form [formGroup]="formPerson"  (ngSubmit)="save()">
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        <label for="numberDocument">Number of document</label>
                        <input type="text" (keyup)="controlMatchNumberDocument.updateValueAndValidity()" name="numberDocument" formControlName="controlNumberDocument" [(ngModel)]="person.numberDocument" placeholder="Number of document" class="form-control"/>
                        <div class="alert alert-danger" *ngIf="controlNumberDocument.errors && (controlNumberDocument.dirty || controlNumberDocument.touched)">
                            <p *ngIf="controlNumberDocument.errors.required">E-mail is required</p>
                            <p *ngIf="controlNumberDocument.errors.minlength">E-mail must be greater than 3 characters long</p>
                            <p *ngIf="controlNumberDocument.errors.maxlength">E-mail must be lesser than 200 characters long</p>          
                        </div>
                    </div>
                </div>

                <div class="col-sm-4">
                    <div class="form-group">
                        <label for="MatchNumberDocument">Confirm number of document</label>
                        <input type="text" name="MatchNumberDocument" formControlName="controlMatchNumberDocument" placeholder="Confirm number of document" class="form-control"/>
                        <div class="alert alert-danger" *ngIf="controlMatchNumberDocument.errors && (controlMatchNumberDocument.dirty || controlMatchNumberDocument.touched)">
                            <p *ngIf="controlMatchNumberDocument.errors.match">It must match with number document</p> 
                        </div>
                    </div>
                </div>
            </div>
        </form>    
7) Trigger validators on submit
    - Create  classs called utils/FormUtil
        >ng generate class utils/FormUtil
    - in utils/form-util.ts 
        import { FormGroup, FormControl } from '@angular/forms';
        export class FormUtil {
            static validateFormFields(formGroup: FormGroup){
                Object.keys(formGroup.controls).forEach(field => {
                    var control = formGroup.get(field);
                    if(control instanceof FormControl){
                        control.markAsTouched({onlySelf:true});
                    }else if (control instanceof FormGroup){
                        FormUtil.validateFormFields(control);
                    }
                });
            }
        }
    - in person-form.component.ts
        save () {
            if(this.formPerson.valid){
            alert("Saved!");
            }else{
            FormUtil.validateFormFields(this.formPerson);
            }
        }

8) Handle validation errors
    - In utils/form.util.ts I created two static methods
        /**
        * It allows to validate if a formcontrol has errors
        * @param formControl 
        */
        static hasErrors(formControl : FormControl){
            return formControl.errors && (formControl.dirty || formControl.touched);
        } 

        /**
        * It allows to validate if a formcontrol has a specific error
        * @param formControl 
        * @param error 
        */
        static hasError(formControl : FormControl, error?:string){
            return FormUtil.hasErrors(formControl) && formControl.errors[error];
        } 

    - In person-form.component.ts create methods to handle validators errors
        hasErrors(formControl : FormControl){
            return FormUtil.hasErrors(formControl);
        } 

        hasError(formControl : FormControl, error?:string){
            return FormUtil.hasError(formControl,error);
        } 

    - In person-form.component.html implement the methods
        <div class="col-md-3">
            <div class="form-group" [ngClass]="{'has-error': hasErrors(controlNumberDocument)}">      
                <label for="numberDocument" class="form-control-label">Number of document</label>
                <input type="text" class="form-control" name="numberDocument" placeholder="Number of document" formControlName="controlNumberDocument" [(ngModel)]="person.numberDocument" (keyup)="controlMatchNumberDocument.updateValueAndValidity()"/>
                <div class="form-control-feedback">
                    <small *ngIf="hasError(controlNumberDocument,'required')">Number of document is required</small>
                    <small *ngIf="hasError(controlNumberDocument,'minlength')">Number of document must be greater than 3 characters long</small>
                    <small *ngIf="hasError(controlNumberDocument,'maxlength')">Number of document must be lesser than 200 characters long</small>            
                </div> 
            </div>
        </div>
9) Adding moment.js to handle dates
    - Adding the moment.js to the project to handle dates
        > npm install moment --save

10) Adding service to get person information with onDiscoverBack
    - I executed the command
        >ng g s services/person
    - In app.module.ts , I decided to add in Providers the service and import the HttpClientModule to use for making request by http
        ...
        import { PersonService } from './services/person.service';
        import { HttpClientModule } from '@angular/common/http';
        ...
        @NgModule({
        ...
        imports: [
            ...
            HttpClientModule
        ],
        providers: [
            PersonService
        ],
        ...
        })
        export class AppModule { }

    - In services/person.service.ts
        import { Injectable } from '@angular/core';
        import {HttpClient} from '@angular/common/http';
        @Injectable()
        export class PersonService {
            constructor(private http : HttpClient){ }  
            getListPerson(){
            return this.http.get('http://localhost:8080/person/');
            }
        }
    - In components/person-list.component.ts
        import { Component, OnInit } from '@angular/core';
        import { PersonService } from '../../services/person.service';

        @Component({
        selector: 'app-person-list',
        templateUrl: './person-list.component.html',
        styleUrls: ['./person-list.component.css']
        })
        export class PersonListComponent implements OnInit {
        listPerson : any;
            constructor(private personService: PersonService) {}
            ngOnInit() {
                this.listPerson = [];
                this.personService.getListPerson()
                .subscribe(
                    (result)=>{
                    this.listPerson = result;
                    }, 
                    (error) => {
                    console.log("ERROR "+error)          
                });
            }
        }    
    - In components/person-list.component.html
         <div class="jumbotron">
            <h1>List person</h1>
            <div class="table-responsive">
                <table class="table table-striped table-dark table-bordered table-hover table-sm">
                <thead class="thead-dark">
                    <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Last name</th>
                    <th scope="col">Number document</th>
                    <th scope="col">E-mail</th>
                    <th scope="col">Birth date</th>
                    <th scope="col">Issue date</th>
                    </tr>
                </thead>
                <tbody>
                    <tr *ngFor="let person of listPerson">
                        <td scope="row">{{person.name}}</td>
                        <td scope="row">{{person.lastName}}</td>
                        <td scope="row">{{person.numberDocument}}</td>
                        <td scope="row">{{person.email}}</td>
                        <td scope="row">{{person.birthDate}}</td>
                        <td scope="row">{{person.issueDate}}</td>
                    </tr>
                </tbody>
                </table>
            </div>
        </div>
9) Load person information to the page
    - In person.service.ts
        import { Injectable } from '@angular/core';
        import {HttpClient} from '@angular/common/http';
        @Injectable()
        export class PersonService {
            constructor(private http : HttpClient){ }  
            /** It returns a list of person */
            getListPerson(){
            return this.http.get('http://localhost:8080/person/');
            }
            /** It returns a specific person */
            get(id :number){
            return this.http.get('http://localhost:8080/person/'+id);
            }
        }
    - In person-form.component.ts , I had to create a boolean variable to show the form when it is prepared so:
        ...
        export class PersonFormComponent implements OnInit {
            ...
            // boolean identifies if form is prepared
            formPrepared: boolean = false;    
            ...
            constructor(private route : ActivatedRoute, private personService : PersonService) {}

            ngOnInit() {    
                this.initLists();
                this.initPerson();
            }

            /** It initializes the person */
            initPerson(){
                let id = this.route.snapshot.params["id"];
                if(id != undefined){
                if(NumberUtil.isNumber(id)){
                    this.personService.get(id).subscribe((result :Person )=>{
                    // the service has been succesful        
                    this.initForm(result);        
                    }, (error) => {
                    // the service has failed
                    debugger;
                    console.log("error: ", error);
                    });
                }else{
                    // id is not numeric
                    debugger;
                }
                }else{
                // id doesn't exist
                this.initForm(new Person());    
                }
            }


            /** It initializes the form */
            initForm(person : Person){
                // initializes the person
                this.person = person;
                // initializing every control
                this.controlName = new FormControl(this.person.name);
                this.controlLastName = new FormControl(this.person.lastName);
                this.controlEmail = new FormControl(this.person.email);
                this.controlNumberDocument = new FormControl(this.person.numberDocument);
                this.controlGender = new FormControl(this.person.gender);
                this.controlMatchNumberDocument= new FormControl('');
                this.controlIssueDate = new FormControl(this.person.issueDate);
                this.controlBirthDate = new FormControl(this.person.birthDate);    
                // setting validators
                this.controlName.setValidators([ 
                Validators.required,      
                Validators.maxLength(150)
                ]);
                this.controlLastName.setValidators([ 
                Validators.required,      
                Validators.maxLength(200)
                ]);
                this.controlEmail.setValidators([ 
                Validators.required,
                Validators.maxLength(150),
                Validators.email
                ]);
                this.controlNumberDocument.setValidators([ 
                Validators.required,
                Validators.minLength(3),
                Validators.maxLength(20),      
                ]);
                this.controlGender.setValidators([ 
                Validators.required        
                ]);
                this.controlMatchNumberDocument.setValidators([
                CustomValidator.match(this.controlNumberDocument)       
                ]);
                this.controlIssueDate.setValidators([
                Validators.required,
                Validators.nullValidator,
                CustomValidator.mindate(this.controlBirthDate)
                ]);
                this.controlBirthDate.setValidators([
                Validators.required,
                Validators.nullValidator,
                CustomValidator.maxdate(this.controlIssueDate)     
                ]);
                // add controls to form
                this.formPerson = new FormGroup({
                controlName:this.controlName,
                controlLastName:this.controlLastName,
                controlEmail:this.controlEmail,
                controlNumberDocument:this.controlNumberDocument,
                controlMatchNumberDocument: this.controlMatchNumberDocument,
                controlGender:this.controlGender,
                controlBirthDate:this.controlBirthDate,
                controlIssueDate:this.controlIssueDate
                })   ;
                // set form prepared as true
                this.formPrepared = true; 
            }
    - In person-form.component.html
        <div class="jumbotron">
        <h1>Person</h1>
        <form [formGroup]="formPerson"  (ngSubmit)="save()" *ngIf="formPrepared">
            ...
        </form>

10) http loader 
    - execute
        >npm install ng-http-loader@0.9.1 --save 
    - in app.module
        ..
        import { NgHttpLoaderModule } from 'ng-http-loader/ng-http-loader.module';
        ..
        imports: [
            ...
            NgHttpLoaderModule
        ],
    - add spiner on app.component.html
        <spinner></spinner>

11) adding toaster
    - execute
        npm install angular5-toaster --save
    - in angular-cli.json in style we add the style of toaster
        "styles": [
            "styles.css",
            "assets/form.css",
            "../node_modules/angular5-toaster/dist/toaster.css"
        ],
    - import toastermodule in app.module.ts
        import {ToasterModule} from 'angular5-toaster';
        import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
        ...
        imports: [
            ToasterModule,
            BrowserAnimationsModule
        ]
    - add a tag html in app.component.html
        <toaster-container></toaster-container>
    - how to implement, in person-form.component.ts
        ...
        import {ToasterService} from 'angular5-toaster';
        ...
        constructor(.. private toasterService : ToasterService) {}
        ...
        /** It saves person */
        save () {
            if(this.formPerson.valid){
            this.personService.save(this.person).subscribe((result : any)=> {
                this.toasterService.pop('success', 'Person saved', 'The person has been saved succesful!');
                this.router.navigate(['/person/form/'+result.id]);
            }, (error) =>{
                this.toasterService.pop('error', "Person did not save", 'The person has not been saved');
            })
            }else{
                FormUtil.validateFormFields(this.formPerson);
            }
        }
11) Pageable
    - We create a class on models called Pageable, this classs will abstract the pageable object from spring
    - It has attributes, methods that allows to manage the pageable and it has a EventEmitter that allows to send event when the datatable is changing
        import {EventEmitter} from '@angular/core';

        export class Pageable {
            content : any;
            pageable: any;
            sort: any;
            totalElements: number;
            totalPages : number;
            last : boolean;
            size: number ;
            numberOfElements : number;    
            pageSize: number;   
            first: boolean;
            number: number;

            listSize: any = [5,10,15,20,30];
            listPages : any = [];

            stateChanged: EventEmitter<boolean> = new EventEmitter();
            
            constructor(object : any){
                if(object == undefined || object == null) object = {};
                this.content = object['content'];
                this.pageable = object['pageable'];
                this.sort = object['sort'];
                this.totalElements = object['totalElements'];
                this.totalPages = object['totalPages'];
                this.last = object['last'];
                this.size = object['size'] != undefined ? object['size']: 5;
                this.numberOfElements = object['numberOfElements'];
                this.pageSize = object['pageSize'];
                this.first = object['first'];
                this.number = object['number'] != undefined ? object['number'] : 0 ;

                if(this.totalPages != undefined){
                    this.listPages = [];
                    for(let i =0; i < this.totalPages; i++){
                        let page = {
                            index:i,
                            label:i+1,
                            active: i==this.number
                        }
                        this.listPages.push(page);
                    }
                }
            }
            
            /** It returns a boolean when it is ready */
            isReady(){
                return this.totalElements != undefined && this.numberOfElements != undefined;
            }
            /** It returns a boolean to know if it has previous */
            hasPrev(){
                return this.number != undefined && this.number-1 >= 0;
            }
            /** It returns a boolean to know if it has next */
            hasNext(){
                return this.number != undefined && this.totalPages != undefined && this.number+1 < this.totalPages;
            }
            /** It returns if it is the first */
            isFirst(){
                return this.first != undefined && this.first;
            }    
            /** It returns if it is the first */
            isLast(){
                return this.last != undefined && this.last;
            }

            /** It returns the prev id */
            getPrevIndex(){
                return this.number != undefined ? this.number -1 : -1;
            }

            /** it returns the next id */
            getNextIndex(){
                return this.number != undefined ? this.number +1 : -1;
            }
        
            /**it returns the last id */
            getLastIndex(){
                return this.totalPages != undefined ? this.totalPages -1 : -1;
            }

            /**it returns the last id */
            getFirstIndex(){
                return 0;
            }

            /** it sets a new index and triggers the event when it is done */
            setPage(index : number){
                this.number=index;
                this.emitEvent();    
            }

            /** it emits the event */
            emitEvent(){
                this.stateChanged.emit(true);
            }

            /** other methods can suscriber to listen new events */
            onStateChanged() {
                return this.stateChanged;
            }    
        }
    - After we create a component called datatable that receive a pageable object and a title
        - execute
            >ng g c components/datatable
        - in datatable.component.ts
            import { Component, OnInit, Input } from '@angular/core';
            import { Pageable } from '../../models/pageable';

            @Component({
            selector: 'app-datatable',
            templateUrl: './datatable.component.html',
            styleUrls: ['./datatable.component.css']
            })
            export class DatatableComponent implements OnInit {

            @Input() pageable : Pageable;
            @Input() title: string;
            
            constructor() { }

            ngOnInit() {
            }
            }
        - In datatable.component.html we create the html with the implementation of pageable
            <div class="jumbotron" *ngIf="pageable.isReady()">
                <div class="card ">
                    <div class="card-header bg-dark text-white">
                        <div class="row">
                        <div class="col-9">
                            <h3 class="no-margin">{{title}}</h3>
                        </div>
                        <div class="col-3 text-align-right">
                            <div class="datatable-records">
                            {{pageable.numberOfElements}}/{{pageable.totalElements}}
                            </div>
                        </div>
                        </div>            
                    </div>
                    <div class="card-body">    
                    <ng-content></ng-content>        
                    </div> 
                    <div class="card-footer">
                    <div class="row">
                        <div class="col-sm-3 col-md-1">
                            <select class="form-control form-control-sm" [(ngModel)]="pageable.size" (change)="pageable.setPage(pageable.getFirstIndex())">
                                <option *ngFor="let size of pageable.listSize" [value]="size">{{size}}</option>
                            </select>
                        </div>
                        <div class="col-sm-9 col-md-11">
                        <nav>
                            <ul class="pagination pagination-sm justify-content-end">
                                <li class="page-item" [ngClass]="{'disabled': pageable.isFirst()}">
                                <a class="page-link" *ngIf="!pageable.isFirst()" (click)="pageable.setPage(pageable.getFirstIndex())" >First</a>
                                <span class="page-link" *ngIf="pageable.isFirst()">First</span>
                                </li>
                                <li class="page-item" [ngClass]="{'disabled': !pageable.hasPrev()}">
                                    <a class="page-link" *ngIf="pageable.hasPrev()" (click)="pageable.setPage(pageable.getPrevIndex())" >Prev</a>
                                    <span class="page-link" *ngIf="!pageable.hasPrev()">Prev</span>
                                </li>
                                <ng-container *ngFor="let page of pageable.listPages">
                                    <li class="page-item" [ngClass]="{'active': page.active}">
                                    <a class="page-link"  (click)="pageable.setPage(page.index)">{{page.label}}</a>
                                    </li>
                                </ng-container>                   
                                <li class="page-item" [ngClass]="{'disabled': !pageable.hasNext()}">
                                    <a class="page-link" *ngIf="pageable.hasNext()" (click)="pageable.setPage(pageable.getNextIndex())" >Next</a>
                                    <span class="page-link" *ngIf="!pageable.hasNext()">Next</span>
                                </li>
                                <li class="page-item" [ngClass]="{'disabled': pageable.isLast()}">
                                    <a class="page-link" *ngIf="!pageable.isLast()" (click)="pageable.setPage(pageable.getLastIndex())" >Last</a>
                                    <span class="page-link" *ngIf="pageable.isLast()">Last</span>
                                </li>
                            </ul>
                            </nav>
                        </div>            
                    </div>
                    </div>
                </div>
        - In the implementation we send in datatable the content that will be implemented on <ng-content></ng-content>
            <app-datatable [title]="'List of person'" [pageable]="pageable">
                <div class="table-responsive">
                    <table class="table table-striped table-bordered table-hover table-sm">
                    <thead class="thead-dark">
                        <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Last name</th>
                        <th scope="col">Number document</th>
                        <th scope="col">E-mail</th>
                        <th scope="col">Birth date</th>
                        <th scope="col">Issue date</th>
                        <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr *ngFor="let person of pageable.content">
                        <td scope="row">{{person.name}}</td>
                        <td scope="row">{{person.lastName}}</td>
                        <td scope="row">{{person.numberDocument}}</td>
                        <td scope="row">{{person.email}}</td>
                        <td scope="row">{{person.birthDate}}</td>
                        <td scope="row">{{person.issueDate}}</td>
                        <td scope="row" class="text-align-right">
                            <button class="btn btn-primary" routerLink="/person/form/{{person.id}}">
                            <i class="fa fa-pencil-square-o"></i>
                            </button>          
                            <button class="btn btn-danger" (click)="delete(person.id)">
                                <i class="fa fa fa-trash-o"></i>
                            </button>
                        </td>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                        <td colspan="6"></td>
                        <td class="text-align-right"><button class="btn btn-success" routerLink="/person/form">Add</button></td>
                        </tr>
                    </tfoot>
                    </table>
                </div>
            </app-datatable>
        - Finally in person-list.component.html I decided to listen the event when the pageable has changed
            export class PersonListComponent implements OnInit {
                pageable : Pageable;

                constructor(private personService: PersonService, private toasterService : ToasterService) { 
                    this.setPageable({});
                }

                ngOnInit() {    
                    this.getList();
                }
                /** initializes pageable and suscribe the event when it has a change */
                setPageable(object : any){
                    this.pageable = new Pageable(object);
                    this.pageable.onStateChanged().subscribe((data)=> {
                    this.getList();
                    })
                }

                /** it gets the list of person */
                getList(){
                    this.personService.getListPerson(this.pageable)
                    .subscribe(
                    (result : any)=>{
                        this.setPageable(result);        
                    }, 
                    (error :HttpErrorResponse) => {        
                        this.toasterService.pop('error', "Error", 'It is not possible to load the list of person');
                        console.log("ERROR "+error)          
                    });
                }

                /** It deletes a person */
                delete(id :number){
                    if(confirm('Are you sure you want to delete this person?')){
                    this.personService.delete(id).subscribe((result) => {
                        this.getList();
                        alert("Person has been deleted");
                    }, (error) => {
                        alert("Error to try delete person");
                        console.log("error: ", error);
                    })
                    }
                }
            }

12) File system
    - in person.service
        /** This method returns a photo of a person */
        getPhoto(id:number){
            return this.http.get('http://localhost:8080/person/get/photo/'+id, {observe:'response', responseType: 'blob'});
        }
        
        /** This method saves photography */
        savePhoto(id :number, photo: File){
            let formData: FormData = new FormData();
            formData.append('photo',photo);
            return this.http.post('http://localhost:8080/person/save/photo/'+id,formData);
        }
    - in person-detail.component.ts
        /** This person variable stores the person */
        person : Person;
        /** This variable stores the image photo */
        photo: any;
        /** This boolean variable determines if view is ready */
        ready: boolean = false;

        ngOnInit() {
            this.initPerson();
        }

        initPerson(){
            let id = this.route.snapshot.params["id"];
            if(id == null || !NumberUtil.isNumber(id))
            this.toasterService.pop('error', 'Error', 'ID person is incorrect');
            else {
            this.personService.get(id).subscribe((result :Person )=>{      
                this.person = result;
                this.ready=true;
                this.personService.getPhoto(this.person.id).subscribe((response : any) =>{
                    if(response.status = 200){
                    let reader = new FileReader();
                    reader.addEventListener("load", () => {
                        this.photo = reader.result;
                    }, false);
                    if(response.body){
                        reader.readAsDataURL(response.body);
                    }
                    }            
                }, (error) => {
                this.toasterService.pop('error', 'Error', 'It was not possible to load the photo');
                });
            }, (error: any) => {
                if(error.status == 404){
                this.toasterService.pop('error', 'Error', 'Person is not found');
                }else{
                this.toasterService.pop('error', 'Error', 'it was not possible to load the person');
                }          
            });
            }
        }
    - in person-detail.component.html
        <img [src]="photo" *ngIf="photo != undefined" alt="imagen"  class="img-thumbnail mx-auto d-block img-fluid">

    - in person-form-component.ts
        export class PersonFormComponent implements OnInit {
            ...
            @ViewChild('photoInput') photoInput;
            ...
            /** This method returns the file from photoInput */
            getPhotoFile() : File {
                let fileInput = this.photoInput.nativeElement;
                if (fileInput.files && fileInput.files[0])
                    return fileInput.files[0];
                return null;
            }
            ...
            /** This method saves person */
            save () {    
                if(!this.formPerson.valid)
                FormUtil.validateFormFields(this.formPerson);
                else{
                this.personService.save(this.person).subscribe((result : any)=> {
                    let photoFile = this.getPhotoFile();
                    if(photoFile){
                    this.personService.savePhoto(result.id, photoFile).subscribe((resultPhoto) => {
                        this.toasterService.pop('success', 'Person saved', 'The person and the photography have been saved successfully');
                        this.router.navigate(['/person/detail/'+result.id]);
                    }, (error)=>{
                        this.toasterService.pop('warning', 'Person saved', 'The person has been saved successfully. However, the photography cannot be saved');            
                    });          
                    }else{
                    this.toasterService.pop('success', 'Person saved', 'The person has been saved successfully');
                    this.router.navigate(['/person/detail/'+result.id]);
                    }
                }, (error) =>{
                    this.toasterService.pop('error', "Error", 'It was not possible to save the person');
                });
                }
            }
        }
    - in person-form.component.html
        <div class="col-md-4">
            <div class="form-group">
                <div class="custom-file">
                    <input type="file" #photoInput class="custom-file-input" id="photo" name="photo" accept="image/*">
                    <label class="custom-file-label" for="photo">Choose a photography...</label>
                </div>
            </div>
        </div> 
    


                    
                





    